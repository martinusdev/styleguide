extends templates/layout

//- Options
block prepend opts
  - var page = helpers.getPageIds('foundations.grid', l_sitemap);
  - var categoryID = page.category;
  - var pageID = page.page;

//- Content
block prepend content

  +main-info(['app/styles/utils/_media.scss','app/styles/layout/_grid.scss', 'app/styles/tools/_utilities.scss'], contents)

    +p-big Documentation of media queries, grids, wrappers and layout utility classes.

  //- end: main info

//- Content
block append content

  //- MEDIA QUERIES
  +content-section(contents[0])

    +p There are three main media queries for screen layouts: S, M, L; and two supplementary media queries XS and XL. Breakpoints for these layouts are described bellow.

    +content-sub-section('Breakpoints')

      +dl
        dt: big XL
        dd width &gt; 1280px
        dt: big L
        dd width &gt; 960px
        dt: big M
        dd width &gt; 768px
        dt: big S
        dd width &gt; 480px
        dt: big XS
        dd width &gt; 0px

    +content-sub-section('Mixins')

      +demo(true)

        +demo-code('scss')
          :code
            @include breakpoint(m) {
              ... styles M and up ...
            }
            @include breakpoint(xl, down) {
              ... styles smaller than XL ...
            }
            @include breakpoint(s, only) {
              ... styles S only ...
            }
            @include breakpoint(640px) {
              ... styles 640px and up ...
            }
            @include breakpoint(1200px, down) {
              ... styles 1200px and down ...
            }
            @include breakpoint(s, l) {
              ... styles S up and L down (smaller than L, in this case S and M)...
            }
            @include breakpoint(200px, 400px) {
              ... styles between 200px and 400px ...
            }
      //- end demo

  //- end: section

  //- WRAPPERS
  +content-section(contents[1])

    +p By default there is one main wrapper class <code class='l-code-inline'>.wrapper-main</code>.

    +dl
      dt: big wrapper-main
      dd width: 1200px

    +demo(true)

      +demo-code
        :code
          <div class='wrapper-main'>
            ...
          </div>
      //- end demo

  //- end: section

  //- GRID 12
  +content-section(contents[2], true)

    +p Grid has mobile first design and consists of 12 columns across 5 different media breakpoints XS (default) / S / M / L / XL.

    +note
      +p Start by creating horizontal container with a class of <code class='l-code-inline'>.row</code>. Now you can add elements with a class beginning with <code class='l-code-inline'>.col-</code> and specify width of each with <code class='l-code-inline'>.col-[-breakpoint]-[width]</code>, where breakpoint is one of s/m/l/xl and width is number 1-12. There is no need to specify the xs breakpoint, because it's default by definition of mobile first philosophy.
      +p Basic column behavior gets applied on any element with class containing <code class='l-code-inline'>.col--</code>. Therefore a <code class='l-code-inline'>.col--m-5</code> will automatically behave as <code class='l-code-inline'>.col--12</code> on viewports smaller than M.

    +warning
      +p Media queries for layouts are set by min width, so for example stuff for layout M are inherited also in L and XL.

    +content-sub-section('Basic')

      +demo
        +demo-example
          .row.row--space
            .col--m-5.col--l-3.col--xl-4
              .l-debug
                span.show-xl XL4
                span.show-l-only L3
                span.show-m-only M5
                span.hide-m 12
            .col--m-7.col--l-6.col--xl-4
              .l-debug
                span.show-xl XL4
                span.show-l-only L6
                span.show-m-only M7
                span.hide-m 12
            .col--l-3.col--xl-4
              .l-debug
                span.show-xl XL4
                span.show-l-only L3
                span.hide-l 12

          .row.row--space
            .col--m-5.col--l-4
              .l-debug
                span.show-l L4
                span.show-m-only M5
                span.hide-m 12
            .col--m-7.col--l-8
              .l-debug
                span.show-l L8
                span.show-m-only M7
                span.hide-m 12

          .row.row--space
            .col--s-6.col--xl-7
              .l-debug
                span.show-xl XL7
                span.show-s.hide-xl S6
                span.hide-s 12
            .col--l-6.col--xl-5
              .l-debug
                span.show-xl XL5
                span.show-l-only L6
                span.hide-l 12

        +demo-code
          :code
            <div class="row">
              <div class="col--m-5 col--l-3 col--xl-4"> … </div>
              <div class="col--m-7 col--l-6 col--xl-4"> … </div>
              <div class="col--l-3 col--xl-4"> … </div>
            </div>

            <div class="row">
              <div class="col--m-5 col--l-4"> … </div>
              <div class="col--m-7 col--l-8"> … </div>
            </div>

            <div class="row">
              <div class="col--s-6 col--xl-7"> … </div>
              <div class="col--l-6 col--xl-5"> … </div>
            </div>
      //- end: demo

    +content-sub-section('Automatic sizing')

      +p In addition to exact sizing, columns can take all available space or just the space they need using <code class='l-code-inline'>.col-[-breakpoint]-fill</code> and <code class='l-code-inline'>.col-[-breakpoint]-shrink</code>

      +demo
        +demo-example
          .row.row--space
            .col--3
              .l-debug XS3
            .col--fill
              .l-debug Fill all available space
            .col--shrink
              .l-debug Shrink
          .row.row--space
            .col--fill
              .l-debug Fill all available space
            .col--fill
              .l-debug Fill all available space
            .col--fill
              .l-debug Fill all available space
            .col--fill
              .l-debug Fill all available space
          .row.row--space
            .col--shrink
              .l-debug Shrink
            .col--shrink
              .l-debug Shrink
            .col--shrink
              .l-debug Shrink
            .col--shrink
              .l-debug Shrink

        +demo-code
          :code
            <div class="row">
              <div class="col col--3"> ... </div>
              <div class="col col--fill"> ... </div>
              <div class="col col--shrink"> ... </div>
            </div>

            <div class="row">
              <div class="col col--fill"> ... </div>
              <div class="col col--fill"> ... </div>
              <div class="col col--fill"> ... </div>
              <div class="col col--fill"> ... </div>
            </div>

            <div class="row">
              <div class="col col--shrink"> ... </div>
              <div class="col col--shrink"> ... </div>
              <div class="col col--shrink"> ... </div>
              <div class="col col--shrink"> ... </div>
            </div>
      //- end: demo

    +content-sub-section('Alignment', 'alignment')

      +p Grid alignment utilities are covered in <a href="/styleguide/utilities#flexbox-alignment">Utilites</a> section.

    +content-sub-section('Nesting')

      +p Rows and columns can be also nested.

      +demo
        +demo-example
          .row.row--space
            .col--l-3.no-mrg-bottom-l
              .l-debug
                span.show-l L3
                span.hide-l 12
            .col--l-9.no-mrg-bottom
              .l-debug.l-debug-nopad
                .row.row--space
                  .col--m-6.no-mrg-bottom-m
                    .l-debug
                      span.show-m Nested M6
                      span.hide-m Nested 12
                  .col--m-6.no-mrg-bottom
                    .l-debug
                      span.show-m Nested M6
                      span.hide-m Nested 12

        +demo-code
          :code
            <div class="row">
              <div class="col col--l-3"> ... </div>
              <div class="col col--l-9">
                <div class="row">
                  <div class="col--m-6"> ... </div>
                  <div class="col--m-6"> ... </div>
                </div>
              </div>
            </div>
      //- end: demo

    +content-sub-section('Offsets')

      +p Colums can be moved to the right by using classes like <code class='l-code-inline'>.ofst-[-breakpoint]-[width]</code>. You can also center column with class <code class='l-code-inline'>.ofst-[-breakpoint]-center</code>.

      +demo
        +demo-example
          .row.row--space
            .col--6.col--s-5.ofst--s-1.col--m-4.col--l-3
              .l-debug
                span.hide-s 6
                span.show-s-only S5, ofst S1
                span.show-m-only M4, ofst S1
                span.show-l L3, ofst S1
            .col--2.col--s-10.ofst--s-1.col--l-7.ofst--l-1
              .l-debug
                span.hide-s 12
                span.show-s.hide-l S10, ofst S1
                span.show-l L7, ofst L1
          .row.row--space
            .col--m-10.col--l-8.ofst--l-center
              .l-debug
                span.hide-m 12
                span.show-m.hide-l M10
                span.show-l L8, center L
        +demo-code
          :code
            <div class="row">
              <div class="col--6 col--s-5 ofst--s-1 col--m-4 col--l-3">
                ...
              </div>
              <div class="col--2 col--s-10 ofst--s-1 col--l-7 ofst--l-1">
                ...
              </div>
            </div>
            <div class="row">
              <div class="col--m-10 col--l-8 ofst--l-center">
                ...
              </div>
            </div>
      //- end: demo

    +content-sub-section('Vertical space')

      +p Vertical space between rows can be created by using class <code class='l-code-inline'>.row--space</code>.

      +demo
        +demo-example
          .row.row--space
            .col
              .l-debug
                span 12
          .row.row--space
            .col--l-6
              .l-debug
                span.show-l L6, col L nospace
                span.hide-l XS12, col space
            .col--l-6
              .l-debug
                span.show-l L6, col L nospace
                span.hide-l XS12, col space
        +demo-code
          :code
            <div class="row row--l-space">
              <div class="col">
                ...
              </div>
            </div>
            <div class="row row--l-space">
              <div class="col col--l-6 col--space col--l-nospace">
                ...
              </div>
              <div class="col col--l-6 col--space col--l-nospace">
                ...
              </div>
            </div>
      //- end: demo

      +content-sub-section('Column border')

        +p Border between two columns can be added on second column with class <code class='l-code-inline'>.col--border</code> which adds border on the left site in the middle of these two columns.

        +demo
          +demo-example
            .row.row--space
              .col--3
                .l-debug Column
              .col--fill.col--border
                .l-debug Column with border
              .col--3
                .l-debug Column
          +demo-code
            :code
              <div class="row">
                <div class="col--3">...</div>
                <div class="col--fill col--border">...</div>
                <div class="col--3">...</div>
              </div>

      +content-sub-section('Grid layout')
        +p Grid layout sizes its children into an evenly spaced layout. Use <code class='l-code-inline'>.grid</code> to set the base styles and add modifiers per breakpoint and number of items in one row <code class='l-code-inline'>.grid-[-breakpoint]-[number]</code>
        +p To add spacing between items use <code class='l-code-inline'>.grid--spaced</code>. You can even break the layout using <code class="l-code-inline">.col-[-breakpoint]-[width]</code> on any grid item.

        +demo
          +demo-example
            code.l-code-inline .grid.grid--1.grid--s-2.grid--m-3.grid--l-4
            .grid.grid--1.grid--s-2.grid--m-3.grid--l-4
              .l-debug &nbsp;
              .l-debug &nbsp;
              .l-debug &nbsp;
              .l-debug &nbsp;
              .l-debug &nbsp;
              .l-debug &nbsp;
              .l-debug &nbsp;
              .l-debug &nbsp;
              .l-debug &nbsp;
              .l-debug &nbsp;
              .l-debug &nbsp;
              .l-debug &nbsp;
            hr
            code.l-code-inline .grid.grid--spaced
            .grid.grid--spaced.grid--1.grid--s-2.grid--m-3.grid--l-4
              div
                .l-debug &nbsp;
              div
                .l-debug &nbsp;
              div
                .l-debug &nbsp;
              div
                .l-debug &nbsp;
              div
                .l-debug &nbsp;
              div
                .l-debug &nbsp;
              div
                .l-debug &nbsp;
              div
                .l-debug &nbsp;
              div
                .l-debug &nbsp;
              div
                .l-debug &nbsp;
              div
                .l-debug &nbsp;
              div
                .l-debug &nbsp;
            hr
            .grid.grid--1.grid--s-2.grid--m-3.grid--l-4
              .l-debug &nbsp;
              .l-debug &nbsp;
              .l-debug &nbsp;
              .l-debug &nbsp;
              .l-debug.col--m-8.col--l-6
                code.text-center
                  .hide-m 12
                  .show-m-only .col--m-8
                  .show-l .col--l-6
              .l-debug &nbsp;
              .l-debug &nbsp;
              .l-debug &nbsp;
              .l-debug &nbsp;
              .l-debug &nbsp;
              .l-debug &nbsp;
          +demo-code
            :code
              <div class="grid grid--1 grid--s-2 grid--m-3 grid--l-4">
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
              </div>

              <div class="grid grid--spaced grid--1 grid--s-2 grid--m-3 grid--l-4">
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
              </div>
