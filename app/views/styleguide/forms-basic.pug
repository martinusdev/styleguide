
extends templates/layout

//- Options
block prepend opts
  - var page = helpers.getPageIds('components.formComponents.formBasic', l_sitemap);
  - var categoryID = page.category;
  - var pageID = page.page;
  - var subPageID = page.subPage;

//- Content
block prepend content

  +main-info(['app/styles/modules/_forms.scss'], contents)

    +p-big Documentation of basic form components such as inputs, textarea, checkboxes, radios and selects.

  //- end: main info

//- Content
block append content

  //- INPUT
  +content-section(contents[0])

    +p Text inputs are basic form components and can be created by using class <code class='l-code-inline'>.input</code> on <code class='l-code-inline'>&lt;input&gt;</code> element.

    +p Input comes in two basic variants, light (default without mod class) and dark <code class='l-code-inline'>.input--dark</code>. Dark inputs should be used on dark backgrounds.

    +demo
      +demo-example
        .row
          .col--l-6
            .form-control.form-control--input
              input.input(type='text', placeholder='Input')
          .col--l-6
            .form-control.form-control--input
              input.input.input--dark(type='text', placeholder='Input')
      +demo-code
        :code
          <input placeholder="Input" class="input" type="text">

          <input placeholder="Input" class="input input--dark" type="text">
    //- end: demo

    +content-sub-section('Text input states')

      +p States can be set by attributes and classes like <code class='l-code-inline'>.is-active</code>, <code class='l-code-inline'>[disabled]</code>, <code class='l-code-inline'>.is-disabled</code>, <code class='l-code-inline'>[readonly]</code>, <code class='l-code-inline'>.readonly</code> and <code class='l-code-inline'>.is-error</code>.

      +demo
        +demo-example
          .row
            .col--l-6
              .form-control.form-control--input
                input.input.is-active(type='text', placeholder='Active')
              .form-control.form-control--input
                input.input(type='text', placeholder='Disabled', disabled, value='Disabled')
            .col--l-6
              .form-control.form-control--input
                input.input(type='text', placeholder='Readonly', readonly, value='Readonly')
              .form-control.form-control--input
                input.input.is-error(type='text', placeholder='Error', value='Error')
          .row
            .col--l-6
              .form-control.form-control--input
                input.input.input--dark.is-active(type='text', placeholder='Active dark')
              .form-control.form-control--input
                input.input.input--dark(type='text', placeholder='Disabled', disabled, value='Disabled dark')
            .col--l-6
              .form-control.form-control--input
                input.input.input--dark(type='text', placeholder='Readonly', readonly, value='Readonly dark')
              .form-control.form-control--input
                input.input.input--dark.is-error(type='text', placeholder='Error', value='Error dark')
        +demo-code
          :code
            <input placeholder="Focus" class="input is-active" type="text">
            <input placeholder="Disabled" disabled="" class="input" type="text">
            <input placeholder="Readonly" readonly="" class="input" type="text">
            <input placeholder="Error" class="input error" type="text">
      //- end: demo

    +content-sub-section('Text input sizes')

      +p There are three main sizes of text inputs: medium (default), large <code class='l-code-inline'>.input--large</code> and small <code class='l-code-inline'>.input--small</code>. For verty small inputs (mainly number spinners), you can add <code class='l-code-inline'>.input--short</code> to make it short.

      +demo
        +demo-example
          .row
            .col--l-6
              .form-control.form-control--input
                input.input.input--large(type='text', placeholder='Large', value='Large')
              .form-control.form-control--input
                input.input(type='text', placeholder='Medium', value='Medium')
              .form-control.form-control--input
                input.input.input--small(type='text', placeholder='Small', value='Small')
            .col--l-6
              .form-control.form-control--input
                input.input.input--large.input--short(type='text', placeholder='123', value='123')
                |
                | Large Short
              .form-control.form-control--input
                input.input.input--short(type='text', placeholder='123', value='123')
                |
                | Medium Short
              .form-control.form-control--input
                input.input.input--small.input--short(type='text', placeholder='123', value='123')
                |
                | Small Short
        +demo-code
          :code
            <input placeholder="Large" class="input input--large" type="text">
            <input placeholder="Medium" class="input" type="text">
            <input placeholder="Small" class="input input--small" type="text">

            <input placeholder="Large" class="input input--large input--short" type="text">
            <input placeholder="Medium" class="input input--short" type="text">
            <input placeholder="Small" class="input input--small input--short" type="text">
      //- end: demo

  //- end: section

  //- TEXTAREA
  +content-section(contents[1])

    +p Textarea can be styled by using class <code class='l-code-inline'>.input</code> on <code class='l-code-inline'>&lt;textarea&gt;</code> tag. Height can be specified with <code class='l-code-inline'>[rows]</code> attribute. States for textarea are same as for input.

    +demo
      +demo-example
        .row
          .col--l-6
            .form-control.form-control--textarea
              textarea.input(rows=3)
      +demo-code
        :code
          <textarea rows="4" class="input"></textarea>
    //- end: demo

  //- end: section

  //- CHECKBOX RADIO
  +content-section(contents[2])

    +p Checkbox or radio element can be created by wrapping native <code class='l-code-inline'>&lt;inuput&gt;</code> element and <code class='l-code-inline'>&lt;label&gt;</code> with specific class as shown in examples below.

    +warning
      +p To proper function of checkbox or radio, do not forget to specify ID for native <code class='l-code-inline'>&lt;input&gt;</code> element and <code class='l-code-inline'>[for]</code> attribute for custom element.

    +demo
      +demo-example
        .row
          .col--l-6
            .form-check
              input.form-check-input(type='checkbox', id='checkbox-01b')
              label.form-check-label(for='checkbox-01b') Checkbox
          .col--l-6
            .form-check
              input.form-check-input(type='radio', id='radio-01b')
              label.form-check-label(for='radio-01b') Radio
      +demo-code
        :code
          <div class="form-check">
            <input id="..." name="..." class="form-check-input" type="checkbox">
            <label for="..." class="form-check-control">Checkbox</label>
          </div>
          <div class="form-check">
            <input id="..." name="..." class="form-check-input" type="checkbox">
            <label for="..." class="form-check-control">Radio</label>
          </div>
    //- end: demo

    +content-sub-section('Checkbox states')

      +p States can be set by using attributes and classes like <code class='l-code-inline'>[disabled]</code> and <code class='l-code-inline'>.is-invalid</code> on hidden native input element.

      +demo
        +demo-example
          .row
            .col--l-6
              .form-check
                input.form-check-input(id='bs-checkbox-disabled', checked, disabled, type='checkbox')
                label.form-check-label(for='bs-checkbox-disabled') Disabled checkbox
              .form-check
                input.form-check-input.is-invalid(id='bs-checkbox-invalid', checked, type='checkbox')
                label.form-check-label(for='bs-checkbox-invalid') Invalid checkbox
        +demo-code
          :code
            <div class="form-check">
              <input id="..." name="..." checked disabled class="form-check-input" type="checkbox">
              <label for="..." class="form-check-label">Disabled</label>
            </div>

            <div class="form-check">
              <input id="..." name="..." checked class="form-check-input is-invalid" type="checkbox">
              <label for="..." class="form-check-label">Invalid</label>
            </div>
      //- end: demo

    +content-sub-section('Radio states')

      +p States can be set same way as for checkboxes.

      +demo
        +demo-example
          .row
            .col--l-6
              .form-check
                input.form-check-input(type='radio', id='radio-03-01', name='radio-03', disabled, checked)
                label.form-check-label(for='radio-03-01') Disabled
              .form-check
                input.form-check-input.is-invalid(type='radio', id='radio-05-01', name='radio-05-01', checked)
                label.form-check-label(for='radio-05-01') Error

        +demo-code
          :code
            <div class="radio">
              <input id="..." name="..." checked="" class="radiocheck__input is-active" type="radio">
              <label for="..." class="radiocheck__control"></label>
              <label for="..." class="radiocheck__label">Focus</label>
            </div>

            <div class="radio">
              <input id="..." name="..." disabled="" checked="" class="radiocheck__input" type="radio">
              ...
            </div>

            <div class="radio">
              <input id="..." name="..." readonly="" checked="" class="radiocheck__input" type="radio">
              ...
            </div>

            <div class="radio">
              <input id="..." name="..." checked="" class="radiocheck__input error" type="radio">
              ...
            </div>
      //- end: demo

    +content-sub-section('Switch')
      +p A switch has the markup of a custom checkbox but uses the <code class='l-code-inline'>.form-switch</code> class to render a toggle switch. Consider using <code class='l-code-inline'>role="switch"</code> to more accurately convey the nature of the control to assistive technologies that support this role.

      +demo
        +demo-example
          .row
            .col
              .form-check.form-switch
                input.form-check-input(type='checkbox', id='switch-01', name='switch-01', role='switch')
                label.form-check-label(for='switch-01') Default switch input
              .form-check.form-switch
                input.form-check-input(type='checkbox', id='switch-02', name='switch-02', role='switch', checked)
                label.form-check-label(for='switch-02') Checked switch input
              .form-check.form-switch
                input.form-check-input(type='checkbox', id='switch-03', name='switch-02', role='switch', disabled)
                label.form-check-label(for='switch-03') Disabled switch input
              .form-check.form-switch
                input.form-check-input(type='checkbox', id='switch-04', name='switch-02', role='switch', checked, disabled)
                label.form-check-label(for='switch-04') Disabled checked switch input
    +content-sub-section('Reverse')
      +p Checkbox or radio can be displayed in reverse order by adding class <code class='l-code-inline'>.form-check-reverse</code> to container.

      +demo
        +demo-example
          .row
            .col
              .form-check.form-check-reverse
                input.form-check-input(type='checkbox', id='checkbox-reverse-01', name='checkbox-reverse')
                label.form-check-label(for='checkbox-reverse-01') Reversed checkbox
              .form-check.form-check-reverse
                input.form-check-input(type='checkbox', disabled, id='checkbox-reverse-02', name='checkbox-reverse')
                label.form-check-label(for='checkbox-reverse-02') Disabled reversed checkbox
              .form-check.form-check-reverse
                input.form-check-input(type='radio', id='radio-reverse-03', name='radio-reverse')
                label.form-check-label(for='radio-reverse-03') Reversed radio

    +content-sub-section('Inline Checkbox / Radio')
      +p Checkbox (radio) can be displayed inline by adding class <code class='l-code-inline'>.form-check-inline</code> to container.

      +demo
        +demo-example
          .row
            .col.mb-medium
              h5 Inline checkboxes
              .form-check.form-check-inline
                input.form-check-input(type='checkbox', id='checkbox-inline-01', name='checkbox-inline')
                label.form-check-label(for='checkbox-inline-01') Inline checkbox
              .form-check.form-check-inline
                input.form-check-input(type='checkbox', id='checkbox-inline-02', name='checkbox-inline')
                label.form-check-label(for='checkbox-inline-02') Checkbox 2
              .form-check.form-check-inline
                input.form-check-input(type='checkbox', id='checkbox-inline-03', name='checkbox-inline')
                label.form-check-label(for='checkbox-inline-03') Checkbox 3
          .row
            .col
              h5 Inline radios
              .form-check.form-check-inline
                input.form-check-input(type='radio', id='radio-inline-01', name='radio-inline')
                label.form-check-label(for='radio-inline-01') Radio 1
              .form-check.form-check-inline
                input.form-check-input(type='radio', id='radio-inline-02', name='radio-inline')
                label.form-check-label(for='radio-inline-02') Radio 2
              .form-check.form-check-inline
                input.form-check-input(type='radio', id='radio-inline-03', name='radio-inline')
                label.form-check-label(for='radio-inline-03') Radio 3
        +demo-code
          :code
            <div class="form-check form-check-inline">
              <input id="..." name="..." class="form-check-input" type="checkbox">
              <label for="..." class="form-check-label">Checkbox 1</label>
            </div>
            <div class="form-check form-check-inline">
              <input id="..." name="..." class="form-check-input" type="checkbox">
              <label for="..." class="form-check-label">Checkbox 2</label>
            </div>
            ...
            <div class="form-check form-check-inline">
              <input id="..." name="..." class="form-check-input" type="radio">
              <label for="..." class="form-check-label">Radio 1</label>
            </div>
            <div class="form-check form-check-inline">
              <input id="..." name="..." class="form-check-input" type="radio">
              <label for="..." class="form-check-label">Radio 2</label>
            </div>
        //- end: demo


    +content-sub-section('Checkbox / Radio groups')

      +p Checkbox (radio) group can be created by adding multiple checkboxes (radios) in one container.

      +warning
        +p States for checkboxes and radios are set individualy on each element.

      +demo
        +demo-example
          .row
            .col--l-6
              h5 Checkbox group
              .form-check
                input.form-check-input(type='checkbox', id='checkbox-group-01', name='checkbox-group-01')
                label.form-check-labell(for='checkbox-group-01') Checkbox 1
              .form-check
                input.form-check-input(type='checkbox', id='checkbox-group-02', name='checkbox-group-02')
                label.form-check-label(for='checkbox-group-02') Checkbox 2
              .form-check
                input.form-check-input(type='checkbox', id='checkbox-group-03', name='checkbox-group-03')
                label.form-check-label(for='checkbox-group-03') Checkbox 3
            .col--l-6
              h5 Radio group
              .form-check
                input.form-check-input(type='radio', id='radio-group-01', name='radio-group')
                label.form-check-label(for='radio-group-01') Radio 1
              .form-check
                input.form-check-input(type='radio', id='radio-group-02', name='radio-group')
                label.form-check-label(for='radio-group-02') Radio 2
              .form-check
                input.form-check-input(type='radio', id='radio-group-03', name='radio-group')
                label.form-check-label(for='radio-group-03') Radio 3
        +demo-code
          :code
            <div class="form-check">
              <input id="..." name="..." class="form-check-input" type="checkbox">
              <label for="..." class="form-check-label">Checkbox 1</label>
            </div>
            <div class="form-check">
              <input id="..." name="..." class="form-check-input" type="checkbox">
              <label for="..." class="form-check-label">Checkbox 2</label>
            </div>
    //- end: demo
  //- end: section

  //- SELECT
  +content-section(contents[3])

    +p Select can be created by using native <code class='l-code-inline'>&lt;select&gt;</code> element with class <code class='l-code-inline'>.js-select</code>. Then javascript will dynamicaly inject HTML DOM for custom select.

    +dependency('Javascript')

      +p Select component is
        | #{' '}
        a.l-a(href="js-select#{htmlPostfix}") wrapper plugin
        |  around
        | #{' '}
        a.l-a(href="https://github.com/jshjohnson/Choices") Choices.js
        |  with customized initalization. All methods and events are supported.

    +demo
      +demo-example
        .row
          .col--l-6
            .form-control.form-control--select
              select.js-select
                each option in [1,2,3,4,5,6]
                  option Option #{option}
      +demo-code
        :code
          <select class="js-select">
            <option>Option 1</option>
            <option>Option 2</option>
            ...
          </select>
    //- end: demo

    +content-sub-section('Select types')

      +p There is several types of select. Default with border around to match other form elements style and <code class='l-code-inline'>.select--ghost</code> with border similar to dropdown.

      +demo
        +demo-example
          .row
            .col--l-6
              .form-control.form-control--select
                select.js-select
                  each option in [1,2,3,4,5,6]
                    option Option #{option}
            .col--l-6
              .form-control.form-control--select
                select.js-select.select--ghost
                  each option in [1,2,3,4,5,6]
                    option Option #{option}

        +demo-code
          :code
            <!-- default -->
            <select class="js-select"></select>

            <!-- ghost -->
            <select class="select--ghost js-select"></select>

    +content-sub-section('Select states')

      +p States can be set by using attributes and classes like <code class='l-code-inline'>[disabled]</code>, <code class='l-code-inline'>.is-disabled</code> and <code class='l-code-inline'>.is-error</code> on hidden native select element.

      +demo
        +demo-example
          .row
            .col--l-6
              .form-control.form-control--select
                select.js-select(disabled)
                  each option in [1,2,3,4,5]
                    option Option #{option}
            .col--l-6
              .form-control.form-control--select
                select.js-select.is-error
                  each option in [1,2,3,4,5]
                    option Option #{option}

            .col--l-6
              .form-control.form-control--select
                select.select--ghost.js-select(disabled)
                  each option in [1,2,3,4,5]
                    option Option #{option}
            .col--l-6
              .form-control.form-control--select
                select.select--ghost.js-select.is-error
                  each option in [1,2,3,4,5]
                    option Option #{option}

        +demo-code
          :code
            <!-- disabled -->
            <select disabled="" class="js-select">
              <option>Option 1</option>
              ...
            </select>

            <!-- error -->
            <select class="js-select error">
              <option>Option 1</option>
              ...
            </select>

            <!-- ghost disabled -->
            <select disabled="" class="select--ghost js-select">
              <option>Option 1</option>
              ...
            </select>

            <!-- ghost error -->
            <select class="select--ghost js-select error">
              <option>Option 1</option>
              ...
            </select>
    //- end: demo

    +content-sub-section('Select sizes')

      +p There are three default sizes of select: medium, small and large. These can be set by using classes <code class='l-code-inline'>.select--[size]</code> on hidden native select element.

      +demo
        +demo-example
          .row
            .col--l-6
              .form-control.form-control--select
                select.js-select.select--large
                  option Large
                  each option in [1,2,3,4,5,]
                    option Option #{option}

              .form-control.form-control--select
                select.js-select
                  option Medium
                  each option in [1,2,3,4,5,]
                    option Option #{option}

              .form-control.form-control--select
                select.js-select.select--small
                  option Small
                  each option in [1,2,3,4,5,]
                    option Option #{option}
        +demo-code
          :code
            <!-- large -->
            <select class="js-select select--large">
              <option>Option 1</option>
              ...
            </select>

            <!-- medium -->
            <select class="js-select">
              <option>Option 1</option>
              ...
            </select>

            <!-- small -->
            <select class="js-select select--small">
              <option>Option 1</option>
              ...
            </select>
    //- end: demo

    +content-sub-section('Select inline')
      +p Select with auto width can be achieved with additional class <code class='l-code-inline'>.select--inline</code>.

      +demo
        +demo-example
          .row
            .col--l-3
              .form-control.form-control--select
                select.js-select.select--inline
                  option Inline
                  option Very long option
                  option Very very very very very long option
                  each option in [1,2,3]
                    option Option #{option}
        +demo-code
          :code
            <select class="js-select select--inline">
              <option>Option 1</option>
              ...
            </select>

    +content-sub-section('Select placeholder')

      +p If you want placeholder as default selected <code class='l-code-inline'>option</code>, add option with attributes <code class='l-code-inline'>[selected disabled placeholder]</code> as shown on example below.

      +demo
        +demo-example
          .row
            .col--l-6
              .form-control.form-control--select
                select.js-select
                  option(selected, disabled, placeholder) This is a placeholder
                  each option in [1,2,3,4]
                    option Option #{option}
        +demo-code
          :code
            <select class="js-select">
              <option selected disabled placeholder>This is a placeholder</option>
              <option>Option 1</option>
              ...
            </select>

    +content-sub-section('Select clearable')
      +p By default, select can't be clear to placeholder or empty value. This behavior can be enabled with additional attribute <code class='l-code-inline'>[data-clearable]</code>.

      +demo
        +demo-example
          .row
            .col--l-6
              .row.form-row
                .form-controls.col
                  .form-control
                    select.js-select(data-clearable)
                      option(selected, disabled, placeholder) This is a placeholder
                      each option in [1,2,3,4]
                        option Option #{option}
        +demo-code
          :code
            <select class="js-select" data-clearable>
              <option selected disabled placeholder>This is a placeholder</option>
              <option>Option 1</option>
            </select>

    +content-sub-section('Select searchable')

      +p Select options can be searched with <code class='l-code-inline'>[data-autocomplete]</code> attribute as shown on example below. If <code class='l-code-inline'>placeholder</code> attribute is set on select, value will be used as placeholder on search input.

      +demo
        +demo-example
          .row
            .col--l-6
              .form-control.form-control--select
                select.js-select(data-autocomplete, placeholder="Search in options")
                  option(selected, disabled, placeholder) This is select with search
                  each option in ['Apple', 'Pineapple', 'Apricot' , 'Banana']
                    option #{option}
        +demo-code
          :code
            <select class="js-select" data-autocomplete placeholder="Search in options">
              <option selected disabled placeholder>This is a placeholder</option>
              <option>Option 1</option>
              ...
            </select>


    +content-sub-section('Select with long texts')
      +p By default, select dropdown has width of select. If you need dropdown with different size, you can set the width <code class='l-code-inline'>[data-select-dropdown-width]</code>.

      +demo
        +demo-example
          .row
            .col--l-3
              .row.form-row
                .form-controls.col
                  .form-control
                    select.js-select
                      option(selected, disabled, placeholder) Select with long strings
                      each option in [1,'Toto je dlhsi text v selecte na niekolko riadkov', 'Totojevelmidlheslovoktorebysamalopeknezalomit',4]
                        option Option #{option}
            .col--l-3
              .row.form-row
                .form-controls.col
                  .form-control
                    select.js-select(data-select-dropdown-width="300px")
                      option(selected, disabled, placeholder) Select with data-select-dropdown-max-width
                      each option in [1,'Toto je dlhsi text v selecte na niekolko riadkov', 'Totojevelmidlheslovoktorebysamalopeknezalomit',4]
                        option Option #{option}
        +demo-code
          :code
            <select class="js-select">
              <option selected disabled placeholder>Select with long strings</option>
              <option>Toto je dlhsi text v selecte na niekolko riadkov</option>
              <option>Totojevelmidlheslovoktorebysamalopeknezalomit</option>
            </select>

            <select class="js-select" data-select-dropdown-width="300px">
              <option selected disabled placeholder>Select with long strings</option>
              <option>Toto je dlhsi text v selecte na niekolko riadkov</option>
              <option>Totojevelmidlheslovoktorebysamalopeknezalomit</option>
            </select>

  //- end: section
