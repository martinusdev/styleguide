// ---------------------------------------------
// UTILITIES
// set of utility classes
// ---------------------------------------------

// CONTENTS
// Typography utilities
// Layout utilities
// Visibility utilities

// ---------------------------------------------
// TYPOGRAPHY UTILITIES

@use 'sass:map';

@import './../../../node_modules/bootstrap/scss/mixins';

.line-large { line-height: 2; }
.line-default { line-height: _map-deep-get($typography-settings, 'default', 'base-line-height'); }
.line-medium { line-height: 1.333; }
.line-small { line-height: 1.2; }

.text-transform-upper {
  text-transform: uppercase;
  letter-spacing: 0.1em;
}
.text-transform-capitalize { text-transform: capitalize; }
.text-transform-none { text-transform: none; }

.letter-spacing-none {
  letter-spacing: normal;

  * {
    letter-spacing: normal !important;
  }
}

.text-bold { font-weight: var(--fw-bold); }
.text-semibold { font-weight: var(--fw-semibold); }
.text-italic { font-style: var(--fs-italic); }
.text-light { font-weight: var(--fw-light); }

.text-normal { font-weight: normal; }

.text-size-regular { font-size: _get-rem($default-font-size); }
.text-size-medium { font-size: _get-rem($font-size-medium); }
.text-size-small { font-size: _get-rem($font-size-small); }

.text-strikethrough { text-decoration: line-through; }

.text-wrap { white-space: normal; }
.text-nowrap { white-space: nowrap; }
.text-ellipsis { @include text-ellipsis; }
// ---------------------------------------------
// LAYOUT UTILITIES

.clearfix { @include clearfix; }
.clear { clear: both; }

// Visibility utilities
@mixin show-for($breakpoint) {
  @if map.get($grid-breakpoints, $breakpoint) {
    @include breakpoint($breakpoint, downfrom) {
      display: none !important;
    }
  } @else {
    @warn 'show-for() parameter breakpoint is not defined in the $breakpoints map';
  }
}

@mixin hide-for($breakpoint) {
  @if map.get($grid-breakpoints, $breakpoint) {
    @include breakpoint($breakpoint) {
      display: none !important;
    }
  } @else {
    @warn 'hide-for() parameter breakpoint is not defined in the $breakpoints map';
  }
}

@mixin visibility-classes() {
  .hide {
    display: none !important;
  }

  .invisible {
    visibility: hidden;
  }

  @each $breakpoint, $size in $grid-breakpoints {
    @if $breakpoint != 'xs' {
      .show-#{$breakpoint} {
        @include show-for($breakpoint);
      }

      .hide-#{$breakpoint} {
        @include hide-for($breakpoint);
      }
    }
  }
}

// ---------------------------------------------
// 3. OTHER UTILITIES

.mb-not-last > *:last-child { margin-bottom: 0; }

.clickable {
  cursor: pointer;
}

@include visibility-classes;

.visually-hidden,
.visually-hidden-focusable:not(:focus):not(:focus-within) {
  @include visually-hidden();
}

.overflow-hidden { overflow: hidden; }
.overflow-auto { overflow: auto; }

.border {
  &-top-grey { border-top: 1px solid $text-color-grey-light; }
  &-bottom-grey { border-bottom: 1px solid $text-color-grey-light; }
  &-left-grey { border-left: 1px solid $text-color-grey-light; }
  &-right-grey { border-right: 1px solid $text-color-grey-light; }
  &-bottom-grey-2 { border-bottom: 2px solid $text-color-grey-light; }
}

.flex-1 { flex: 1; }
.flex-noshrink { flex-shrink: 0 !important; }
.flex-fill { flex: 1 0 1px !important; }

.flex-shrinkable {
  flex: 0 0 auto !important;
  flex-shrink: 1 !important;
}

@include breakpoint(m, down) {
  .overflow-scroll {
    &-x,
    &-y,
    &-xy {
      white-space: nowrap;
      -ms-overflow-style: none;  /* Internet Explorer 10+ */

      /* stylelint-disable */
      scrollbar-width: none;  /* Firefox */
      /* stylelint-enable */

      &::-webkit-scrollbar {
        display: none !important;
      }
    }

    &-x {
      overflow-x: scroll;
    }

    &-y {
      overflow-y: scroll;
    }

    &-xy {
      overflow: scroll;
    }

    &-shadow {
      position: relative;

      &::after {
        position: absolute;
        width: 50px;
        height: 100%;
        right: 0;
        top: 0;
        background: linear-gradient(90deg, rgba(255, 255, 255, 0) 0%, #fff 100%);
        display: block;
        content: ' ';
        pointer-events: none;
      }

      &--secondary {
        &::after {
          background: linear-gradient(90deg, rgba(254, 247, 241, 0) 0%, _color(secondary) 100%);
        }
      }
    }
  }
}

.maw-100 {
  max-width: 100%;
}

.miw-auto {
  min-width: auto;
}

.miw-0 {
  min-width: 0;
}

.pointer-help {
  cursor: help;
}
