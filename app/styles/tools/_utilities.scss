// ---------------------------------------------
// UTILITIES
// set of utility classes
// ---------------------------------------------

// CONTENTS
// Typography utilities
// Layout utilities
// Visibility utilities

// ---------------------------------------------
// BACKGROUND UTILITIES

@each $variant, $color in $color-presets {
  .bg-#{'' + $variant} {
    background-color: $color;
  }
}

.bg-dark-grey {
  background-color: _color(grey, 900);
}

// ---------------------------------------------
// TYPOGRAPHY UTILITIES

.line-large { line-height: 2; }
.line-default { line-height: _map-deep-get($typography-settings, 'default', 'base-line-height'); }
.line-medium { line-height: 1.333; }
.line-small { line-height: 1.2; }

.text-transform-upper {
  text-transform: uppercase;
  letter-spacing: 0.1em;
}
.text-transform-capitalize { text-transform: capitalize; }
.text-transform-none { text-transform: none; }

.letter-spacing-none {
  letter-spacing: normal;

  * {
    letter-spacing: normal !important;
  }
}

.text-bold { font-weight: 700; }
.text-semibold { font-weight: 600; }
.text-light { font-weight: 300; }
.text-normal { font-weight: normal; }

.text-size-regular { font-size: _get-rem($default-font-size); }
.text-size-medium { font-size: _get-rem($font-size-medium); }
.text-size-small { font-size: _get-rem($font-size-small); }

.text-italic { font-style: italic; }
.text-strikethrough { text-decoration: line-through; }

.text-center { text-align: center; }
.text-left { text-align: left; }
.text-right { text-align: right; }
.text-justify { text-align: justify; }

@each $breakpoint, $size in $grid-breakpoints {
  @include breakpoint( $breakpoint ) {
    .text-center#{_get-variant-name($breakpoint, '-')} { text-align: center; }
    .text-left#{_get-variant-name($breakpoint, '-')} { text-align: left; }
    .text-right#{_get-variant-name($breakpoint, '-')} { text-align: right; }
  }
}

.text-vam { vertical-align: middle; }
.text-vat { vertical-align: top; }
.text-vab { vertical-align: bottom; }
.text-vabl { vertical-align: baseline; }
.text-vamd { vertical-align: -0.15em; }

.text-space-half { margin-bottom: _get-space('v', 'small'); }
.text-nospace { margin: 0; }
.text-space-left { margin-left: _get-space('h', 'small'); }
.text-space-right { margin-right: _get-space('h', 'small'); }
.text-space-left-tiny { margin-left: _get-space('h', 'tiny'); }
.text-space-right-tiny { margin-right: _get-space('h', 'tiny'); }

.text-wrap { white-space: normal; }
.text-nowrap { white-space: nowrap; }
.text-ellipsis { @include text-ellipsis; }
// ---------------------------------------------
// LAYOUT UTILITIES

.clearfix { @include clearfix; }
.clear { clear: both; }

// Flexbox alignment classes
@mixin alignment-classes() {
  // Children horizontal alignment
  .align-items-right { justify-content: flex-end; }
  .align-items-center { justify-content: center; }
  .align-items-spaced { justify-content: space-around; }
  .align-items-justify { justify-content: space-between; }
  // Children vertcial alignment
  .align-items-top { align-items: flex-start; }
  .align-items-bottom { align-items: flex-end; }
  .align-items-middle { align-items: center; }
  .align-items-stretch { align-items: stretch; }

  // Selft horizontal alignmnet
  .align-self-left {
    margin-left: 0;
    margin-right: auto;
  }

  .align-self-right {
    margin-left: auto;
    margin-right: 0;
  }

  .align-self-center {
    margin-left: auto;
    margin-right: auto;
  }

  // Self vertical alignmnet
  .align-self-top { align-self: flex-start; }
  .align-self-bottom { align-self: flex-end; }
  .align-self-middle { align-self: center; }
  .align-self-stretch { align-self: stretch; }
}

@include alignment-classes;

// Visibility utilities
@mixin show-for($breakpoint) {
  @if map-get($grid-breakpoints, $breakpoint) {
    @include breakpoint($breakpoint, downfrom) {
      display: none !important;
    }
  } @else {
    @warn 'show-for() parameter breakpoint is not defined in the $breakpoints map';
  }
}

@mixin hide-for($breakpoint) {
  @if map-get($grid-breakpoints, $breakpoint) {
    @include breakpoint($breakpoint) {
      display: none !important;
    }
  } @else {
    @warn 'hide-for() parameter breakpoint is not defined in the $breakpoints map';
  }
}

@mixin show-for-only($breakpoint) {
  $lower-bound-name: $breakpoint;
  $upper-bound-name: _map-next($grid-breakpoints, $breakpoint, 'key');

  @if $lower-bound-name {
    @include breakpoint($lower-bound-name, downfrom) {
      display: none !important;
    }

    @if $upper-bound-name {
      @include breakpoint($upper-bound-name) {
        display: none !important;
      }
    }
  } @else {
    @warn 'hide-for() parameter #{$breakpoint} is not defined properly in the $breakpoints map';
  }
}

@mixin hide-for-only($breakpoint) {
  @if map-get($grid-breakpoints, $breakpoint) {
    @include breakpoint($breakpoint, only) {
      display: none !important;
    }
  } @else {
    @warn 'hide-for() parameter #{$breakpoint} is not defined properly in the $breakpoints map';
  }
}

@mixin visibility-classes() {
  .hide {
    display: none !important;
  }

  .invisible {
    visibility: hidden;
  }

  @each $breakpoint, $size in $grid-breakpoints {
    @if $breakpoint != 'xs' {
      .show-#{$breakpoint} {
        @include show-for($breakpoint);
      }

      .hide-#{$breakpoint} {
        @include hide-for($breakpoint);
      }
    }

    .show-#{$breakpoint}-only {
      @include show-for-only($breakpoint);
    }

    .hide-#{$breakpoint}-only {
      @include hide-for-only($breakpoint);
    }
  }
}

@mixin is-consent-visibility-classes() {
  .is-consent-show-inline {
    display: inline !important;
  }

  .is-consent-show-inline-block {
    display: inline-block !important;
  }

  .is-consent-show-flex {
    display: flex !important;
  }

  .is-consent-show {
    display: block !important;
  }

  .is-consent-hide {
    display: none !important;
  }

  .is-consent-invisible {
    visibility: hidden;
  }

  @each $breakpoint, $size in $grid-breakpoints {
    @if $breakpoint != 'xs' {
      .is-consent-show-#{$breakpoint} {
        @include show-for($breakpoint);
      }

      .is-consent-hide-#{$breakpoint} {
        @include hide-for($breakpoint);
      }
    }

    .is-consent-show-#{$breakpoint}-only {
      @include show-for-only($breakpoint);
    }

    .is-consent-hide-#{$breakpoint}-only {
      @include hide-for-only($breakpoint);
    }
  }
}

// ---------------------------------------------
// 3. OTHER UTILITIES

@each $breakpoint, $size in $grid-breakpoints {
  @include breakpoint( $breakpoint ) {
    .block#{_get-variant-name($breakpoint, '-')} { display: block !important; }
    .inline-block#{_get-variant-name($breakpoint, '-')} { display: inline-block !important; }

    .position-relative#{_get-variant-name($breakpoint, '-')} { position: relative; }
    .position-absolute#{_get-variant-name($breakpoint, '-')} { position: absolute; }
    .position-fixed#{_get-variant-name($breakpoint, '-')} { position: fixed; }
  }
}

.mb-not-last > *:last-child { margin-bottom: 0; }

.clickable {
  cursor: pointer;
}

@include visibility-classes;

.is-consent {
  @include is-consent-visibility-classes;
}

.visually-hidden {
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  height: 1px;
  width: 1px;
  margin: -1px;
  padding: 0;
  border: 0;
}

.overflow-hidden { overflow: hidden; }
.overflow-auto { overflow: auto; }

@each $variant, $color in $color-presets {
  .bg-#{'' + $variant} {
    background-color: $color;
  }
}

.bg-default {
  background-color: $default-bg-color;
}

.bg-secondary {
  background-color: $secondary-bg-color;
}

.bg-teal {
  background-color: $teal-bg-color;
}

.bg-blue {
  background-color: $blue-bg-color;
}

.bg-green {
  background-color: $green-bg-color;
}

.border {
  &-top-grey { border-top: 1px solid $text-color-grey-light; }
  &-bottom-grey { border-bottom: 1px solid $text-color-grey-light; }
  &-left-grey { border-left: 1px solid $text-color-grey-light; }
  &-right-grey { border-right: 1px solid $text-color-grey-light; }

  &-bottom-grey-2 { border-bottom: 2px solid $text-color-grey-light; }
}

.flex { display: flex; }
.flex-column { flex-direction: column; }
.flex-1 { flex: 1; }
.flex-noshrink { flex-shrink: 0 !important; }
.flex-wrap { flex-wrap: wrap; }
.flex-nowrap { flex-wrap: nowrap; }
.flex-fill { flex: 1 0 1px !important; }

.flex-shrinkable {
  flex: 0 0 auto !important;
  flex-shrink: 1 !important;
}

.block-fill {
  display: block;
  width: 100%;
}

.w-100 { width: 100%; }
.w-75 { width: 75%; }
.w-50 { width: 50%; }
.w-25 { width: 25%; }

@include breakpoint(m, down) {
  .overflow-scroll {
    &-x,
    &-y,
    &-xy {
      white-space: nowrap;
      -ms-overflow-style: none;  /* Internet Explorer 10+ */

      /* stylelint-disable */
      scrollbar-width: none;  /* Firefox */
      /* stylelint-enable */

      &::-webkit-scrollbar {
        display: none !important;
      }
    }

    &-x {
      overflow-x: scroll;
    }

    &-y {
      overflow-y: scroll;
    }

    &-xy {
      overflow: scroll;
    }

    &-shadow {
      position: relative;

      &::after {
        position: absolute;
        width: 50px;
        height: 100%;
        right: 0;
        top: 0;
        background: linear-gradient(90deg, rgba(255, 255, 255, 0) 0%, #fff 100%);
        display: block;
        content: ' ';
        pointer-events: none;
      }
    }
  }
}
